---
import { MOBILE_MENU_CONTENT_ID } from "@/consts/mobile-menu";
import HamburgerButton from "@/components/HamburgerButton.astro";
import Menu from "@/components/Menu.astro";
import { Image } from "astro:assets";
import { ModeToggle } from "@/components/ModeToggle";
import {
  LanguageSelector,
  MobileLanguageSelector,
} from "@/components/LanguageSelector";
import { Mails, PhoneCallIcon } from "lucide-react";
import { flags } from "@/data/flags";
import { getTranslationFromURL } from "@/i18n/utils";
import { getLocaleFromURL } from "@/i18n/config";

const pathname = Astro.url.pathname;
const textColor =
  pathname !== "/en" && pathname !== "/es" ? "text-foreground" : "text-white";

const t = getTranslationFromURL(pathname);
const currentLang = getLocaleFromURL(pathname);
---

<header
  class="py-2 px-6 z-50 fixed top-0 left-0 right-0 bg-transparent transition-colors duration-300"
>
  <div class="flex gap-4 justify-between items-center max-w-[90rem] mx-auto">
    <div class="flex gap-5 items-center">
      <a href={`/${currentLang}`} class="flex gap-x-3 items-center">
        <Image
          src="/logoRoyal.webp"
          alt="Royal Fast & Safe Logo"
          width={100}
          height={100}
          class="w-28 h-28 md:w-36 md:h-28 object-cover object-center"
        />
      </a>
      <div class={`max-md:-mb-1 ${textColor}`}>
        <Menu />
      </div>
      <div class="hidden xl:flex gap-5 items-center">
        {
          flags.map(({ alt, src }) => (
            <Image
              src={src}
              alt={alt}
              width={20}
              height={20}
              class="w-6 h-6 md:w-8 md:h-8"
            />
          ))
        }
      </div>
    </div>
    <div class="flex flex-1/2 items-center justify-end gap-4 mr-6 z-40">
      <div class="hidden lg:flex">
        <LanguageSelector
          currentLang={currentLang}
          currentPath={pathname}
          client:load
        />
      </div>
      <ModeToggle client:load />
      <a href="tel:+18884286329">
        <button
          class="bg-background text-foreground hover:bg-primary-600 hover:text-white px-4 py-2 rounded-full flex items-center cursor-pointer gap-2 transition-colors duration-300"
          aria-label="Call us"
        >
          <PhoneCallIcon size={19} />
          <span class="hidden lg:flex">(888) 428-6329</span>
        </button>
      </a>
      <a href={`/${currentLang}/contact`} class="hidden lg:flex">
        <button
          class="bg-white px-4 py-2 rounded-xl flex items-center cursor-pointer gap-2 text-black hover:bg-primary-600 hover:text-white transition-colors duration-300"
        >
          <Mails />
          <span class="uppercase">{t.nav.contact}</span>
        </button>
      </a>
    </div>
    <HamburgerButton class:list="block lg:hidden" id="menuButton" />
    <div
      class="fixed inset-0 z-[888] flex w-screen h-[100dvh] flex-col items-center overflow-x-auto lg:hidden backdrop-blur-lg bg-black/85"
      id={MOBILE_MENU_CONTENT_ID}
    >
      <aside
        class="flex min-h-16 w-full items-center justify-end px-6 pt-6 cursor-pointer"
      >
        <HamburgerButton id="innerMenuButton" />
      </aside>
      <nav
        class="navContent flex w-full h-full flex-col items-start justify-end px-6 gap-5 mb-8"
      >
        {
          Object.values(t.routes).map((route: any) => (
            <a
              href={route.href}
              class:list={["text-white font-clash text-5xl font-medium"]}
              id={`navmob-link-${route.href}`}
            >
              {route.title}
            </a>
          ))
        }
        <a
          href={`/${currentLang}/contact`}
          class="w-fit bg-primary-500 px-14 py-3 rounded-xl flex items-center cursor-pointer gap-2 text-white hover:bg-primary-700 transition-colors duration-300"
        >
          <Mails />
          <span class="uppercase">{t.nav.contact}</span>
        </a>

        <!-- Language Selector for Mobile -->
        <div class="w-full mt-8">
          <MobileLanguageSelector
            currentLang={currentLang}
            currentPath={pathname}
            client:load
          />
        </div>
      </nav>
    </div>
  </div>
</header>

<style>
  #menuMobileContent {
    opacity: 0;
    pointer-events: none;
    transition: opacity 0.3s;
    scrollbar-gutter: stable;
  }

  #menuMobileContent.open {
    opacity: 1;
    pointer-events: all;
  }

  @media (prefers-reduced-motion) {
    #menuMobileContent {
      transition: opacity 0s;
    }
    header {
      transition: none;
    }
  }
</style>

<script>
  function toggleMenu(
    nav: HTMLElement | null,
    menuMobileContent: HTMLElement | null,
    innerMenuButton: HTMLElement | null
  ) {
    menuMobileContent?.classList.toggle("open");
    nav?.classList.toggle("open");
    innerMenuButton?.classList.toggle("open");
    document.body.classList.toggle("overflow-hidden");
    document.body.classList.toggle("lg:overflow-auto");
  }

  function headerBgTransition() {
    const header = document.querySelector("header") as HTMLElement;
    if (window.scrollY > 10) {
      header.classList.add("bg-black/50", "backdrop-blur");
      header.classList.remove("bg-transparent");
    } else {
      header.classList.add("bg-transparent");
      header.classList.remove("bg-black/50", "backdrop-blur");
    }
  }

  window.addEventListener("scroll", () => {
    headerBgTransition();
  });

  window.onload = () => {
    headerBgTransition(); // if the user relaods the page, to check if the header should be transparent or not

    const nav = document.querySelector("nav") as HTMLElement;
    const menuButton = document.querySelector("#menuButton") as HTMLElement;
    const innerMenuButton = document.querySelector(
      "#innerMenuButton"
    ) as HTMLElement;
    const menuMobileContext = document.getElementById(
      "menuMobileContent"
    ) as HTMLElement;

    const linksMobile: NodeListOf<HTMLAnchorElement> =
      document.querySelectorAll('a[id^="navmob-link-"]');

    function handleLinkClick(isMobile: boolean) {
      if (isMobile) {
        toggleMenu(nav, menuMobileContext, innerMenuButton);
        menuButton.classList.toggle("hidden");
      }
    }

    linksMobile.forEach((link) => {
      link.addEventListener("click", () => handleLinkClick(true));
    });

    menuButton?.addEventListener("click", () => {
      menuButton?.classList.toggle("hidden");
      toggleMenu(nav, menuMobileContext, innerMenuButton);
    });
    innerMenuButton?.addEventListener("click", () => {
      menuButton?.classList.toggle("hidden");
      toggleMenu(nav, menuMobileContext, innerMenuButton);
    });

    if (menuMobileContext?.classList.contains("open")) {
      toggleMenu(nav, menuMobileContext, innerMenuButton);
    }
  };
</script>
