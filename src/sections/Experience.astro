---
import SectionTitle from "@/components/SectionTitle.astro";
import SliderExperience from "@/components/SliderExperience";
import { ExperienceImages } from "@/data/carousel";
import type { SlideData } from "@/types/experienceSlide";
import { Image } from "astro:assets";
import { ChevronLeft, ChevronRight } from "lucide-react";

// interface Props {
//   slides: SlideData[];
//   currentSlide?: number;
// }

const currentSlide = 1;
const totalSlides: number = ExperienceImages.length;
---

<section class="" id="experience">
  <div class="container px-4 md:px-8">
    <SectionTitle title="Our Expertise in Heavy Haul" />
  </div>
  <SliderExperience client:visible />
  <!-- <div class="max-w-4xl mx-auto my-4 sm:my-8">
    <div
      class="relative overflow-hidden rounded-xl border shadow-md bg-background"
    >
      <div
        id="slide-counter"
        class="text-center py-2 sm:py-3 text-gray-400 font-medium text-sm sm:text-base"
      >
        Slide {currentSlide} of {totalSlides}
      </div>

      <div id="slider-container" class="relative">
        <div id="slider" class="flex transition-transform duration-300 ease">
          {
            ExperienceImages.map((slide, index) => (
              <div
                class="slide w-full flex-shrink-0 bg-background"
                data-index={index + 1}
              >
                <div class="relative">
                  <Image
                    src={slide.imageUrl || "/placeholder.svg"}
                    alt={`Equipment ${slide.equipment.name} ${slide.equipment.model}`}
                    class="w-full h-[250px] sm:h-[350px] md:h-[400px] object-cover rounded-2xl p-1"
                    width={200}
                    height={200}
                  />
                </div>

                <div class="p-4 sm:p-6 bg-background">
                  <div class="flex items-center justify-between">
                    <div class="text-center flex-1">
                      <h3 class="text-primary-500 font-bold text-lg sm:text-xl mb-1 sm:mb-2">
                        From
                      </h3>
                      <p class="text-gray-700 dark:text-white font-medium text-sm sm:text-base">
                        {slide.from.city}, {slide.from.state}
                      </p>
                    </div>

                    <div class="flex flex-col items-center">
                      <div class="relative w-16 sm:w-24 h-10 flex items-center justify-center">
                        <Image
                          src="/semi-truck.webp"
                          alt={`Semi-truck`}
                          class="w-12 h-12 absolute animate-pulse"
                          width={40}
                          height={40}
                        />
                      </div>
                    </div>

                    <div class="text-center flex-1">
                      <h3 class="text-primary-500 font-bold text-lg sm:text-xl mb-1 sm:mb-2">
                        To
                      </h3>
                      <p class="text-gray-700 font-medium text-sm sm:text-base">
                        {slide.to.city}, {slide.to.state}
                      </p>
                    </div>
                  </div>
                </div>

                <div class="bg-background flex flex-col gap-2 items-start md:items-center my-5">
                  <h3 class="text-primary-500 font-bold text-lg sm:text-xl my-2">
                    Equipment Details
                  </h3>
                  <div class="">
                    <div class="p-4 sm:p-6 pt-0 sm:pt-0">
                      <div class="grid md:grid-cols-2 gap-5 sm:gap-6">
                        <div>
                          <p class="flex gap-2 font-semibold text-gray-700 text-sm sm:text-base">
                            Name:{" "}
                            <span class="font-normal">
                              {slide.equipment.name}
                            </span>
                          </p>
                          <p class="flex gap-2 font-semibold text-gray-700 text-sm sm:text-base">
                            Model:{" "}
                            <span class="font-normal">
                              {slide.equipment.model}
                            </span>
                          </p>
                        </div>
                        <div>
                          {slide.equipment.weight && (
                            <p class="flex gap-2 font-semibold text-gray-700 text-sm sm:text-base">
                              Weight:{" "}
                              <span class="font-normal">
                                {slide.equipment.weight}
                              </span>
                            </p>
                          )}
                          {slide.equipment.dimensions && (
                            <p class="flex gap-2 font-semibold text-gray-700 text-sm sm:text-base">
                              Dimensions:{" "}
                              <span class="font-normal">
                                {slide.equipment.dimensions}
                              </span>
                            </p>
                          )}
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            ))
          }
        </div>

        <button
          id="prev-button"
          class={`absolute left-1 sm:left-2 top-1/3 transform -translate-y-1/2 bg-white/80 hover:bg-primary-400 dark:hover:bg-primary-700 text-black hover:text-white rounded-full p-1 sm:p-2 shadow-md z-10 transition-colors duration-200 cursor-pointer`}
          aria-label="Previous slide"
        >
          <ChevronLeft />
        </button>
        <button
          id="next-button"
          class={`absolute right-1 sm:right-2 top-1/3 transform -translate-y-1/2 bg-white/80 hover:bg-primary-400 dark:hover:bg-primary-700 text-black hover:text-white rounded-full p-1 sm:p-2 shadow-md z-10 cursor-pointer transition-colors duration-200 `}
          aria-label="Next slide"
        >
          <ChevronRight />
        </button>
      </div>
    </div>
  </div> -->
</section>

<style>
  @keyframes pulse {
    0% {
      opacity: 1;
      transform: translateX(0);
    }
    50% {
      opacity: 0.7;
      transform: translateX(100%);
    }
  }

  .animate-pulse {
    animation: pulse 2.5s ease-in-out infinite;
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    // DOM Elements with type assertions
    const slider = document.getElementById("slider") as HTMLElement;
    const slides = document.querySelectorAll<HTMLElement>(".slide");
    const prevButton = document.getElementById(
      "prev-button"
    ) as HTMLButtonElement;
    const nextButton = document.getElementById(
      "next-button"
    ) as HTMLButtonElement;
    const slideCounter = document.getElementById(
      "slide-counter"
    ) as HTMLElement;

    let currentSlide: number = 1;
    const totalSlides: number = slides.length;

    // Actualiza el contador de slides
    function updateSlideCounter(): void {
      if (slideCounter) {
        slideCounter.textContent = `Slide ${currentSlide} of ${totalSlides}`;
      }
    }

    function updateSlider() {
      if (slider) {
        const offset: number = (currentSlide - 1) * -100;
        slider.style.transform = `translateX(${offset}%)`;
      }

      // Actualiza el contador de slides
      updateSlideCounter();
    }

    function goToSlide(slideIndex: number): void {
      currentSlide = Math.max(1, Math.min(slideIndex, totalSlides));
      updateSlider();
    }

    // Event listeners for slider navigation
    prevButton?.addEventListener("click", () => {
      goToSlide(currentSlide - 1);
    });

    nextButton?.addEventListener("click", () => {
      goToSlide(currentSlide + 1);
    });

    // Optional: Add keyboard navigation
    document.addEventListener("keydown", (e: KeyboardEvent) => {
      if (e.key === "ArrowLeft") {
        goToSlide(currentSlide - 1);
      } else if (e.key === "ArrowRight") {
        goToSlide(currentSlide + 1);
      }
    });
  });
</script>
